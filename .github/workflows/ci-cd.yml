name: VisionSub CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Code quality checks
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.7.0
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}
    
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-ansi
    
    - name: Run code formatting check
      run: |
        poetry run black --check src/
        poetry run isort --check-only src/
    
    - name: Run linting
      run: |
        poetry run flake8 src/
        poetry run pylint src/visionsub --disable=C0114,C0115,C0116
    
    - name: Run security checks
      run: |
        poetry run bandit -r src/visionsub/
        poetry run safety check

  # Run tests
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    needs: code-quality
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.9', '3.10', '3.11']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libglib2.0-0 \
          libsm6 \
          libxext6 \
          libxrender-dev \
          libgomp1 \
          libgl1-mesa-glx \
          libavcodec-dev \
          libavformat-dev \
          libswscale-dev \
          tesseract-ocr \
          tesseract-ocr-chi-sim \
          tesseract-ocr-chi-tra \
          fonts-wqy-microhei
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.7.0
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
    
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-ansi
    
    - name: Run unit tests
      run: |
        poetry run pytest tests/unit/ -v --cov=src/visionsub --cov-report=xml --cov-report=term-missing
    
    - name: Run integration tests
      run: |
        poetry run pytest tests/integration/ -v --tb=short
    
    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
    
    - name: Run performance tests
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      run: |
        poetry run pytest tests/performance/ -v --tb=short

  # Build and test Docker images
  build-and-test-docker:
    name: Build & Test Docker
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name != 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build main application image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: false
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build web interface image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.web
        push: false
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:web-latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build batch processor image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.batch
        push: false
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:batch-latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Test Docker Compose setup
      run: |
        docker-compose -f docker-compose.yml config --quiet
        docker-compose -f docker-compose.yml up -d redis database
        sleep 10
        docker-compose -f docker-compose.yml ps
        docker-compose -f docker-compose.yml down

  # Security scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-and-test-docker
    if: github.event_name != 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # Deploy to staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-and-test-docker, security-scan]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to staging environment
      run: |
        echo "Deploying to staging environment..."
        # Add deployment commands here
    
    - name: Run smoke tests
      run: |
        echo "Running smoke tests..."
        # Add smoke test commands here

  # Deploy to production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-test-docker, security-scan]
    if: github.event_name == 'release'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push main application image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build and push web interface image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.web
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:web-${{ github.ref_name }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build and push batch processor image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.batch
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:batch-${{ github.ref_name }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add production deployment commands here
    
    - name: Create release notes
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.repos.createReleaseNotes({
            owner: context.repo.owner,
            repo: context.repo.repo,
            tag_name: '${{ github.ref_name }}',
            target_commitish: '${{ github.sha }}'
          })