# Pytest configuration for VisionSub
[tool:pytest]
minversion = 6.0
addopts = 
    -v
    --tb=short
    --strict-markers
    --strict-config
    --cov=src/visionsub
    --cov-report=term-missing
    --cov-report=html
    --cov-report=xml
    --cov-fail-under=80
    --maxfail=5
    --durations=10
    --disable-warnings
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*
markers =
    unit: Unit tests for individual components
    integration: Integration tests for component interactions
    performance: Performance tests for benchmarking
    slow: Tests that take a long time to run
    gpu: Tests that require GPU acceleration
    gui: Tests that require GUI environment
    network: Tests that require network access
    database: Tests that require database access
    security: Security-related tests
    api: API-related tests
    ocr: OCR-related tests
    video: Video processing tests
    memory: Memory management tests
    logging: Logging system tests
    health: Health check tests
    config: Configuration tests
    async: Asynchronous operation tests
    cache: Cache-related tests
    security: Security-related tests
    ui: User interface tests
    web: Web interface tests
    batch: Batch processing tests
    realtime: Real-time processing tests
    regression: Regression tests
    smoke: Smoke tests for basic functionality
    e2e: End-to-end tests
filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::UserWarning:visionsub.*
    ignore::ResourceWarning
    ignore::ImportWarning

# Coverage configuration
[coverage:run]
source = src/visionsub
omit = 
    */tests/*
    */test_*
    */__pycache__/*
    */migrations/*
    */venv/*
    */env/*
    */.env/*
    */.venv/*
    */build/*
    */dist/*
    */.tox/*
    setup.py
    */setup.py
    */conftest.py
    */.pytest_cache/*

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    raise AssertionError
    raise NotImplementedError
    if __name__ == .__main__.:
    if TYPE_CHECKING:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod

[coverage:html]
directory = htmlcov

[coverage:xml]
output = coverage.xml

# Test configuration
[pytest-testmon]
testmon_commandline = "pytest"
project_name = "visionsub"

# Configure pytest-xdist for parallel testing
[pytest-xdist]
numprocesses = auto
dist = loadscope